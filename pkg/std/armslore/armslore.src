//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
// Original: Unknown.                                                           //
// Revisited: MontuZ (MontuZ@aol.com) Jan 30, 2004.                             //
// Version: 2.0                                                                 //
// Core: 093                                                                    //
// Bugs: None. Atleast none that I know of..                                    //
// ToDo: Add in for items with an OnHitScript.                                  //
//                                                                              //
//                Now tells the cast rate of castable weapons.                  //
//               And the poison level of perma poisoned weapons.                //
//                  Also the actual dmg/ar/hp of an item.                       //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

Use cfgfile;
Use uo;
Use basic;

Include "include/string";
Include "include/client";
Include "include/classes";
Include "include/skillpoints";

Const POINTS := 250;

Program do_armslore( character )

    SendSysMessage( character , "Select an object to evaluate." );

    Var item := Target( character );

    If( !Accessible( character , item ) )
    SendSysMessage( character , "You can not reach that.");
    Return;
    Endif

    If( Distance( character , item ) > 2 )
    SendSysMessage( character , "That is too far away." );
    Return;
    Endif

    If( ( item.onhitscript == ":combat:spellonhit" ) OR ( item.onhitscript == "spellonhit" ) )
    EvaluateCastOnHit( character , item );
    Elseif( ( item.hitscript == ":combat:spellstrikescript" ) OR ( item.hitscript == "spellstrikescript" ) )
    EvaluateCastWeapon( character , item );
    Elseif( ( item.hitscript == ":combat:trielementalscript" ) OR ( item.hitscript == "trielementalscript" ) )
    EvaluateFuryCastWeapon( character , item );
    Elseif( ( item.hitscript == ":combat:poisonhit" ) OR ( item.hitscript == "poisonhit" ) )
    EvaluatePoisonWeapon( character , item );
    Elseif( item.isa( POLCLASS_WEAPON ) )
    EvaluateWeapon( character , item );
    Elseif( item.isa( POLCLASS_ARMOR ) )
    EvaluateArmor( character , item );
    Else
    SendSysMessage( character , "You can not evaluate that." );
    Endif

EndProgram


Function EvaluateArmor( who , item )

    Var crafter := GetObjProperty( who , CLASSEID_CRAFTER );

    If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
        If( crafter )
            If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
            SendSysMessage( who , "I can't quite tell . . ." );
            Return;
            Endif
        Else
        SendSysMessage( who , "I can't quite tell . . ." );
        Return;
        Endif
    Endif

    Var ar := item.ar;
    Var Armour;

    Armour := " [Armour Rating: " + item.ar + "] ";

    Var max_hp := Cint(item.maxhp);
    Var hp     := Cint(item.hp);

    If( !max_hp )
    max_hp := 1;
        If( !hp )
        hp := 1;
        Endif
    Endif
	
    Var condition  := Cint( Cdbl(hp) / CDbl(max_hp) * 100 );
    Var ItemHP;

    ItemHP := "[Item HP: " + condition + "%]";

    SendSysMessage( who , TruncateArticle(item.desc) + Armour + ItemHP );

EndFunction


Function EvaluateWeapon( who , item )

    Var crafter := GetObjProperty( who , CLASSEID_CRAFTER );

    If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
        If( crafter )
            If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
            SendSysMessage( who , "I can't quite tell . . ." );
            Return;
            Endif
        Else
        SendSysMessage( who , "I can't quite tell . . ." );
        Return;
        Endif
    Endif

    Var max_hp := Cint(item.maxhp);
    Var hp     := Cint(item.hp);

    If( !max_hp )
    max_hp := 1;
        If( !hp )
        hp := 1;
        Endif
    Endif

    Var condition := Cint( Cdbl(hp) / CDbl(max_hp) * 100 );
    Var cfg	  := ReadConfigFile( ":*:itemdesc" );
    Var base_dmg  := cfg[item.objtype].Damage;
    Var dmg_mod	  := Cint(item.dmg_mod);
    Var quality	  := item.quality;
    Var space	  := Find( base_dmg , "d" , 1 );
    Var space2a	  := Find( base_dmg , "+" , space+1 );
    Var space2b	  := Find( base_dmg , "-" , space+1 );
    Var dice_a	  := Cint( base_dmg[1,space-1] );
    Var bonus	  := 0;
    Var dice_t;

    If( (!space2a) and space2b )
    space2a := space2b;
    Endif

    If( !space2a )
    dice_t	:= Cint( base_dmg[space+1,(len(base_dmg)-space)] );
    Else
    dice_t	:= Cint( base_dmg[space+1, (space2a-space-1)] );
    bonus	:= Cint( base_dmg[space2a+1, len(base_dmg)-space2a] );
    Endif

    If( space2b )
    bonus := 0 - bonus;
    Endif

    Var average	:= Cint( (dice_a * (CDbl(dice_t+1)/2)) + bonus );

    average    := Cint( average * condition / 100 * quality );
    average    := Cint( average + dmg_mod );

    Var DamageRating;

    DamageRating := " [Damage Rating: " + average + "] ";

    Var ItemHP;

    ItemHP := "[Item HP: " + condition + "%]";

    SendSysMessage( who , TruncateArticle(item.desc) + DamageRating + ItemHP );

EndFunction

Function EvaluateCastWeapon( who , item )

    Var crafter := GetObjProperty( who , CLASSEID_CRAFTER );

    If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
        If( crafter )
            If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
            SendSysMessage( who , "I can't quite tell . . ." );
            Return;
            Endif
        Else
        SendSysMessage( who , "I can't quite tell . . ." );
        Return;
        Endif
    Endif

    Var spellcfg := ReadConfigFile( "::spells" );
    Var Casts := spellcfg[GetObjProperty( item , "HitWithSpell" )].Name;
    Var Spell;

    Spell := " [Casts: " + Casts + "]";

    Var Cast := GetObjProperty( item , "ChanceOfEffect" );
    Var CastRate;

    CastRate := " [Chance: " + Cast + "%]";
    
    Var CircleNum := GetObjProperty( item , "EffectCircle" );
    Var Circle;

    Circle := " [Circle: " + CircleNum + "] ";

    Var max_hp := Cint(item.maxhp);
    Var hp     := Cint(item.hp);

    If( !max_hp )
    max_hp := 1;
        If( !hp )
        hp := 1;
        Endif
    Endif

    Var condition  := Cint( Cdbl(hp) / CDbl(max_hp) * 100 );
    Var ItemHP;

    ItemHP := "[Item HP: " + condition + "%]";

    SendSysMessage( who , TruncateArticle(item.desc) + Spell + CastRate + Circle + ItemHP );

EndFunction

Function EvaluateCastOnHit( who , item )

    Var crafter := GetObjProperty( who , CLASSEID_CRAFTER );

    If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
        If( crafter )
            If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
            SendSysMessage( who , "I can't quite tell . . ." );
            Return;
            Endif
        Else
        SendSysMessage( who , "I can't quite tell . . ." );
        Return;
        Endif
    Endif

    Var spellcfg := ReadConfigFile( "::spells" );
    Var Casts := spellcfg[GetObjProperty( item , "HitWithSpell" )].Name;
    Var Spell;

    Spell := " [Casts: " + Casts + "]";

    Var Cast := GetObjProperty( item , "ChanceOfEffect" );
    Var CastRate;

    CastRate := " [Chance: " + Cast + "%]";

    Var CircleNum := GetObjProperty( item , "EffectCircle" );
    Var Circle;

    Circle := " [Circle: " + CircleNum + "] ";

    Var max_hp := Cint(item.maxhp);
    Var hp     := Cint(item.hp);

    If( !max_hp )
    max_hp := 1;
        If( !hp )
        hp := 1;
        Endif
    Endif

    Var condition  := Cint( Cdbl(hp) / CDbl(max_hp) * 100 );
    Var ItemHP;

    ItemHP := "[Item HP: " + condition + "%]";

    SendSysMessage( who , TruncateArticle(item.desc) + Spell + CastRate + Circle + ItemHP );

EndFunction

Function EvaluateFuryCastWeapon( who , item )

    Var crafter := GetObjProperty( who , CLASSEID_CRAFTER );

    If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
        If( crafter )
            If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
            SendSysMessage( who , "I can't quite tell . . ." );
            Return;
            Endif
        Else
        SendSysMessage( who , "I can't quite tell . . ." );
        Return;
        Endif
    Endif

    Var Cast := GetObjProperty( item , "ChanceOfEffect" );
    Var CastRate;

    CastRate := "[Chance: " + Cast + "%] ";

    Var max_hp := Cint(item.maxhp);
    Var hp     := Cint(item.hp);

    If( !max_hp )
    max_hp := 1;
        If( !hp )
        hp := 1;
        Endif
    Endif

    Var condition  := Cint( Cdbl(hp) / CDbl(max_hp) * 100 );
    Var ItemHP;

    ItemHP := "[Item HP: " + condition + "%]";

    SendSysMessage( who , TruncateArticle(item.desc) + " [Casts: Elemental Fury] " + CastRate + ItemHP );

EndFunction

Function EvaluatePoisonWeapon( who , item )

    Var crafter := GetObjProperty( who , CLASSEID_CRAFTER );

    If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
        If( crafter )
            If( !CheckSkill( who , SKILLID_ARMSLORE , -1 , POINTS ) )
            SendSysMessage( who , "I can't quite tell . . ." );
            Return;
            Endif
        Else
        SendSysMessage( who , "I can't quite tell . . ." );
        Return;
        Endif
    Endif

    Var max_hp := Cint(item.maxhp);
    Var hp     := Cint(item.hp);

    If( !max_hp )
    max_hp := 1;
        If( !hp )
        hp := 1;
        Endif
    Endif

    Var condition := Cint( Cdbl(hp) / CDbl(max_hp) * 100 );
    Var cfg	  := ReadConfigFile( ":*:itemdesc" );
    Var base_dmg  := cfg[item.objtype].Damage;
    Var dmg_mod	  := Cint(item.dmg_mod);
    Var quality	  := item.quality;
    Var space	  := Find( base_dmg , "d" , 1 );
    Var space2a   := Find( base_dmg , "+" , space+1 );
    Var space2b	  := Find( base_dmg , "-" , space+1 );
    Var dice_a	  := Cint( base_dmg[1,space-1] );
    Var bonus	  := 0;
    Var dice_t;

    If( (!space2a) and space2b )
    space2a := space2b;
    Endif

    If( !space2a )
    dice_t      := Cint( base_dmg[space+1,(len(base_dmg)-space)] );
    Else
    dice_t	:= Cint( base_dmg[space+1, (space2a-space-1)] );
    bonus	:= Cint( base_dmg[space2a+1, len(base_dmg)-space2a] );
    Endif

    If( space2b )
    bonus := 0 - bonus;
    Endif

    Var average	:= Cint( (dice_a * (CDbl(dice_t+1)/2)) + bonus );

    average  := Cint( average * condition / 100 * quality );
    average  := Cint( average + dmg_mod );

    Var DamageRating;

    DamageRating := " [Damage Rating: " + average + "] ";

    Var ItemHP;

    ItemHP := "[Item HP: " + condition + "%]";

    Var Poison := GetObjProperty( item , "Poisonlvl" );
    Var PoisonLvl;

    PoisonLvl := " [PoisonLvl: " + Poison + "]";

    SendSysMessage( who , TruncateArticle(item.desc) + PoisonLvl + DamageRating + ItemHP );

EndFunction
